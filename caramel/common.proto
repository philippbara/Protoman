// Heavily influenced by OSI https://github.com/OpenSimulationInterface/open-simulation-interface/
// Most datatypes in here are basically a 1:1 copy

syntax = "proto3";

option optimize_for = SPEED;

package smp;


//
// \brief A cartesian 3D vector for positions, velocities or accelerations or
// its uncertainties.
//
// The coordinate system is defined as right-handed.
//
// Units are m for positions, m/s for velocities, and m/s^2 for
// accelerations.
//
message Vector3d
{
    // The x coordinate.
    //
    // Unit: m, m/s, or m/s^2
    //
    double x = 1;

    // The y coordinate.
    //
    // Unit: m, m/s, or m/s^2
    //
    double y = 2;

    // The z coordinate.
    //
    // Unit: m, m/s, or m/s^2
    //
    double z = 3;
}

//
// \brief A cartesian 3D vector for positions, velocities or accelerations or
// its uncertainties.
//
// The coordinate system is defined as right-handed.
//
// Units are m for positions, m/s for velocities, and m/s^2 for
// accelerations.
//
message Vector3dCovariance
{
    // The x coordinate.
    //
    // Unit: m, m/s, or m/s^2
    //
    Vector3d data = 1;

    // The covariance for each data entry.
    //
    // Unit: m, m/s, or m/s^2
    //
    Vector3d covariance = 2;
}

//
// \brief A cartesian 2D vector for positions, velocities or accelerations or
// its uncertainties.
//
// Units are m for positions, m/s for velocities, and m/s^2 for
// accelerations.
//
message Vector2d
{
    // The x coordinate.
    //
    // Unit: m, m/s, or m/s^2
    //
    double x = 1;

    // The y coordinate.
    //
    // Unit: m, m/s, or m/s^2
    //
    double y = 2;
}

//
// \brief A cartesian 2D vector for positions, velocities or accelerations or
// its uncertainties.
//
// Units are m for positions, m/s for velocities, and m/s^2 for
// accelerations.
//
message Vector2dCovariance
{
    // The x coordinate.
    //
    // Unit: m, m/s, or m/s^2
    //
    Vector2d data = 1;

    // The covariance for each data entry.
    //
    // Unit: m, m/s, or m/s^2
    //
    Vector2d covariance = 2;
}

//
// \brief A timestamp.
//
// Names and types of fields are chosen in accordance to
// google/protobuf/timestamp.proto to allow a possible switch in the future.
// There is no definition of the zero point in time neither it is the Unix
// epoch. A simulation may start at the zero point in time but it is not
// mandatory.
//
message Timestamp
{
    // The number of seconds since the start of e.g. the simulation / system /
    // vehicle.
    //
    // Unit: s
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // \endrules
    //
    int64 seconds = 1;

    // The number of nanoseconds since the start of the last second.
    //
    // Range: [0, 999.999.999]
    //
    // Unit: ns
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // is_less_than_or_equal_to: 999999999
    // \endrules
    //
    uint32 nanos = 2;
}

//
// \brief The dimension of a 3D box, e.g. the size of a 3D bounding box or its
// uncertainties.
//
// The dimensions are positive. Uncertainties are negative or positive.
//
// Dimension is defined in the specified reference coordinate frame along the
// x-axis (=length), y-axis (=width) and z-axis (=height).
//
message Dimension3d
{
    // The length of the box.
    //
    // Unit: m
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // \endrules
    //
    double length = 1;

    // The width of the box.
    //
    // Unit: m
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // \endrules
    //
    double width = 2;

    // The height of the box.
    //
    // Unit: m
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // \endrules
    //
    double height = 3;
}

//
// \brief A 3D orientation, orientation rate or orientation acceleration (i.e.
// derivatives) or its uncertainties denoted in euler angles.
//
// Units are rad for orientation, rad/s for rates, and rad/s^2 for
// accelerations
//
// The preferred angular range is [-pi, pi]. The coordinate system is defined as
// right-handed.
// For the sense of each rotation, the right-hand rule applies.
//
// The rotations are to be performed \b yaw \b first (around the z-axis),
// \b pitch \b second (around the new y-axis) and \b roll \b third (around the
// new x-axis) to follow the definition according to [1] (Tait-Bryan / Euler
// convention z-y'-x'').
//
// Roll/Pitch are 0 if the objects xy-plane is parallel to its parent's
// xy-plane. Yaw is 0 if the object's local x-axis is parallel to its parent's
// x-axis.
//
// \f$ Rotation_{yaw,pitch,roll} =
// Rotation_{roll}*Rotation_{pitch}*Rotation_{yaw} \f$
//
// \f$ vector_{\text{global coord system}} :=
// Rotation_{yaw,pitch,roll}^{-1}( \f$ \c Orientation3d \f$
// )*vector_{\text{local coord system}} + local_{origin}\text{::position} \f$
//
// \attention This definition changed in OSI version 3.0.0. Previous OSI
// versions  (V2.xx) had an other definition.
//
// \par Reference:
// [1] DIN Deutsches Institut fuer Normung e. V. (2013). <em>DIN ISO 8855 Strassenfahrzeuge - Fahrzeugdynamik und Fahrverhalten - Begriffe</em>. (DIN ISO 8855:2013-11). Berlin, Germany.
//
message Orientation3d
{
    // The roll angle/rate/acceleration.
    //
    // Unit: rad, rad/s, or rad/s^2
    //
    double roll = 1;

    // The pitch angle/rate/acceleration.
    //
    // Unit: rad, rad/s, or rad/s^2
    //
    double pitch = 2;

    // The yaw angle/rate/acceleration.
    //
    // Unit: rad, rad/s, or rad/s^2
    //
    double yaw = 3;
}

message Orientation3dCovariance
{
    // The roll angle/rate/acceleration.
    //
    // Unit: rad, rad/s, or rad/s^2
    //
    double roll = 1;

    // The pitch angle/rate/acceleration.
    //
    // Unit: rad, rad/s, or rad/s^2
    //
    double pitch = 2;

    // The yaw angle/rate/acceleration.
    //
    // Unit: rad, rad/s, or rad/s^2
    //
    double yaw = 3;
}

//
// \brief coordinate system based on WGS84 for positions.
//
// Units are 째 for coordinates, m/s for speed m for accuracy and 째 for bearing. 
// Altitude is the high depend of NN.
//

message Coordinates
{
    // The latitude coordinate.
    //
    // Unit: 째
    //
    double latitude = 1;

    // The longitude coordinate.
    //
    // Unit: 째
    //
    double longitude = 2;

    // The altitude coordinate.
    //
    // Unit: m
    //
    double altitude = 3;

    // The speed value.
    //
    // Unit: m/s
    //
    double speed = 4;

    // The accuracy of coordinates.
    //
    // Unit: m
    //
    double accuracy = 5;
	
    // The bearing.
    //
    // Unit: *
    //
    double bearing = 6;
}

//
// \brief A common identifier (ID), represented as a string.
//
// Has to be unique at any given time.
// Identifier values may be only be reused if the
// available address space is exhausted and the specific values have not been in
// use for several timestamps.
//
message Identifier
{
    // The identifier's value.
    //
    string value = 1;
}

//
// \brief The base attributes of a stationary object or entity.
//
// All coordinates and orientations are relative to
// the global frame. (All coordinates and orientations
// from detected objects are relative to the host vehicle frame.)
//
message BaseStationary
{
    // The 3D dimensions of the stationary object (bounding box), e.g. a
    // landmark.
    //
    Dimension3d dimension = 1;

    // The reference point for position and orientation, i.e. the center (x,y,z)
    // of the bounding box.
    //
    Vector3d position = 2;

    // The relative orientation of the stationary object w.r.t. its parent
    // frame, noted in the parent frame. The orientation becomes global/absolute
    // if the parent frame is inertial (all parent frames up to ground truth).
    //
    // \f$ Origin_{\text{base stationary entity}} :=
    // Rotation_{yaw,pitch,roll}( \f$ \c #orientation \f$ )*
    // (Origin_{\text{parent coord system}} -
    // \f$ \c #position \f$ )\f$
    //
    // \note There may be some constraints how to align the orientation w.r.t.
    // to some stationary object's or entity's definition.
    //
    Orientation3d orientation = 3;
}

//
// \brief The base attributes of an object that is moving.
//
// This includes the \c MovingObject messages.
// E.g. a vehicle is a base moving object.
//
// All coordinates and orientations are relative to
// the global frame. All coordinates and orientations
// from detected objects are relative to the host vehicle frame
//
message BaseMoving
{
    // The 3D dimension of the moving object (its bounding box).
    //
    Dimension3d dimension = 1;

    // The reference point for position and orientation: the center (x,y,z) of
    // the bounding box.
    //
    Coordinates position = 2;

    // The relative orientation of the moving object w.r.t. its parent frame,
    // noted in the parent frame. The orientation becomes global/absolute if
    // the parent frame is inertial.
    //
    // \f$ Origin_{\text{base moving entity}} :=
    // Rotation_{yaw,pitch,roll}( \f$ \c #orientation \f$ )*
    // (Origin_{\text{parent coord system}} -
    // \f$ \c #position \f$ ) \f$
    //
    // \note There may be some constraints how to align the orientation w.r.t.
    // to some stationary object's or entity's definition.
    //
    Orientation3d orientation = 3;

    // The relative velocity of the moving object w.r.t. the parent frame,
    // noted in the parent frame. The velocity becomes global/absolute if
    // the parent frame does is inertial.
    //
    // \c #position \f$ (t) := \f$ \c #position \f$ (t-dt)+ \f$ \c #velocity \f$
    // *dt \f$
    //
    Coordinates velocity = 4;

    // The relative orientation rate of the moving object w.r.t. its parent
    // frame and parent orientation rate in the center point of the bounding box
    // (origin of the bounding box frame), noted in the parent frame.
    // The orientation becomes global/absolute if the parent frame is inertial
    //
    // \c #orientation \f$ .yaw(t) := \f$ \c #orientation_rate \f$ .yaw(t) * dt
    // + \f$ \c #orientation \f$ .yaw(t-dt) \f$
    //
    // \c #orientation \f$ .pitch(t) := \f$ \c #orientation_rate \f$ .pitch(t) *
    // dt + \f$ \c #orientation \f$ .pitch(t-dt) \f$
    //
    // \c #orientation \f$ .roll(t) := \f$ \c #orientation_rate \f$ .roll(t) *
    // dt + \f$ \c #orientation \f$ .roll(t-dt)\f$
    //
    Orientation3d orientation_rate = 5;

}

message ExtraFields {
    string field1 = 1; // Some extra fields for developing
    string field2 = 2; // Some extra fields for developing
    string field3 = 3; // Some extra fields for developing
    double field4 = 4; // Some extra fields for developing
    double field5 = 5; // Some extra fields for developing
    double field6 = 6; // Some extra fields for developing
}